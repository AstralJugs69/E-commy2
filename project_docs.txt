# Project Documentation: Hybrid E-commerce Platform (Comprehensive)
*(Generated: 2025-05-27 - Reflects state after refactor/code-polish-v2 work)*

## 1. Current Progress

Work commenced on the `feature/customer-address-management` branch (now merged or superseded) and continued on the `refactor/code-polish-v2` branch.

### 1.1 Refactor/Polish Phase (Branch: `refactor/code-polish-v2`)

**Goal:** Address technical debt, UX polish items, add i18n foundation, and prepare for deployment via Docker.

**Branch:** `refactor/code-polish-v2` (branched from main)

**Status:** Key refactors, fixes, and deployment setup completed. Ready for further polish or feature work.

**Completed on this branch:**

*   **Backend - Phone Assignment:** Fixed potential race condition by moving phone number assignment (`Available` -> `Busy`) into the atomic `POST /api/orders` transaction. Removed the separate `GET /api/orders/assign-number/:orderId` route. Added `assignedPhoneNumberId` relation to `Order` model (Migration: `20250420125359_assign_phone_in_order_tx`). (L13, L28)
*   **Customer FE - Order Success Page:** Refined page to fetch and display the *specific* assigned verification phone number (as a `tel:` link) from order details, improving clarity. Removed generic reminder text.
*   **FE - Image URL Handling:** Created `getImageUrl` utility functions in both Customer and Admin frontends to consistently handle image path construction (prepending API base URL for relative paths, using absolute URLs directly, providing placeholders). Updated components (`ProductCard`, `ProductDetailPage`, `CartPage`, `WishlistPage`, Admin tables/details) to use this utility. (L23)
*   **Customer FE - Product Detail Page:** Implemented `react-bootstrap Carousel` to display multiple product images. Adjusted layout to improve visibility of Add-to-Cart button and resized "Back to Products" button.
*   **Customer FE - Cart Page:** Fixed quantity adjustment logic. Replaced direct input with +/- buttons using `updateCartItemQuantity` context function, respecting stock limits and min quantity.
*   **Backend - Rate Limiting:** Adjusted `express-rate-limit` settings. Shortened general/write windows to 40s with adjusted limits (50/20). Increased login attempts slightly (15 per 15min). Verified stricter limits remain for password reset/register.
*   **Admin FE - Password Change:** Added "Profile Settings" page (`/admin/profile`) allowing logged-in admins to change their own password (requires current password).
*   **Customer FE - Password Change:** Added "Security" tab to Settings page (`/settings`) allowing logged-in customers to change their own password (requires current password).
*   **Customer FE - Checkout Location:** Implemented Delivery Location selection dropdown on Checkout page. Added modal (`Add New Location`) to create new locations during checkout (using `POST /api/addresses`). Updated order submission (`POST /api/orders`) to send `deliveryLocationId`. Fetches districts for dropdown via `GET /api/districts`.
*   **Customer FE - PWA Enhancements:**
    *   Added `PWAPrompt` component using `useRegisterSW` to handle update notifications (toast with refresh button).
    *   Added manual "Install App" button to Layout Navbar, triggered by `beforeinstallprompt` event.
    *   Added necessary PWA icons (`192x192`, `512x512`, `apple-touch-icon`, `favicon`) to `/public` folder. Verified manifest settings.
*   **Admin FE - Category Image Upload:** Modified Category modal to use `<input type="file">` instead of URL input. Integrated with `/api/admin/upload` endpoint for image processing (resize, convert to WebP) and storage. Category CRUD now uses the returned image URL.
*   **Backend - Deployment Prep (Docker/Render):**
    *   Created multi-stage `Dockerfile` in `packages/backend` for building and running the Node/Prisma app.
    *   Created `.dockerignore` in `packages/backend`.
    *   Modified `packages/backend/package.json` start script to include `npx prisma migrate deploy` before `node dist/index.js`.
    *   Configured Render Web Service build command to use `npm install --production=false`.
    *   Configured Render Web Service start command to use the updated `npm run start`.
    *   Configured Render Static Sites for both frontends.
    *   Configured required Environment Variables on Render (DATABASE_URL, JWT_SECRET, VITE_API_URL, CORS_ORIGIN).
*   **Backend - Compression:** Added `compression` middleware to `index.ts` to enable gzip/brotli response compression.
*   **i18n Setup (Customer FE):**
    *   Installed `i18next`, `react-i18next`, `i18next-browser-languagedetector`.
    *   Created `i18n.ts` configuration supporting 'en', 'am', 'om'.
    *   Created placeholder `translation.json` files in `public/locales/`.
    *   Added language switcher UI to `Layout.tsx`.
    *   Internationalized text within `Layout.tsx`. (Full i18n refactor of other components deferred).

**Next Steps (Deferred/Potential):**

*   Complete i18n refactoring across all Customer FE components/pages.
*   Obtain and implement actual Amharic/Oromo translations.
*   Further UI/UX Polish (Feedback consistency, focus states, mobile responsiveness tuning, microcopy).
*   Accessibility: Perform manual checks and address minor findings.
*   Testing: Increase test coverage (backend integration, frontend components/flows).
*   Refactor Admin FE Auth to use Context.
*   Implement frontend retry logic for order creation if phone number assignment fails temporarily (backend now handles assignment atomically, but might fail if *no* numbers are available).
*   Data flow diagram generation/review.

## 1.2 Completed: Customer Address Management Foundation

*(Details moved from previous Current Focus)*

### Goal:
Allow authenticated customers to save, edit, delete, and set default delivery locations on their profile (Settings page) and select a saved location during checkout.

### Branch:
Work done on `feature/customer-address-management` (merged or state incorporated into `main` before `refactor/code-polish-v2` branch). Integration into Checkout completed on `refactor/code-polish-v2`.

### Progress:
- Refactored Prisma Schema (Address -> DeliveryLocation), Migrated.
- Added `/api/districts` endpoint.
- Refactored `/api/addresses` routes (now `/api/delivery-locations` likely) for DeliveryLocation CRUD.
- Refactored `POST /api/orders` to use `deliveryLocationId`.
- Implemented Location selection/add modal in `CheckoutPage.tsx`.
- Implemented Location management UI in `SettingsPage.tsx`.

## 1.3 Completed: Multiple Product Images

*(From previous docs)* The project supports multiple product images.
- Updated DB schema (`imageUrl` -> `images` relation).
- Updated Backend API.
- Updated Admin FE Product Form.
- Updated Customer FE components (ProductCard, DetailPage, Cart, Wishlist).

## 1.4 Completed: Initial Refactor/Review Phase

*(From previous docs - `refactor/code-review-performance-ux` branch, merged to main)*
- Added DB Indexes.
- Standardized API calls.
- Optimized Backend List Queries.
- Frontend Optimizations (`react-icons`, `React.lazy` for Admin FE).
- Admin Zone Map fix.
- General aesthetics pass (spacing, alignment, consistency).
- Settings page UX refinement.
- Order status descriptions added.
- Basic rate limiting on backend auth.
- Minor UX improvements (Order Success page).
- Admin Dashboard order section refactor.

## 2. Project Summary & Vision

### 2.1. Core Concept
Hybrid E-commerce Platform for businesses needing manual phone verification after online order placement. Mobile-first customer frontend (React PWA) + Admin Panel (React).

### 2.2. Unique Workflow
1.  Customer browses/adds to cart (React PWA).
2.  Checkout: provides delivery details (selects/adds DeliveryLocation), geolocation captured.
3.  Order Submission (`POST /api/orders`):
    *   Validates data, delivery location.
    *   **Atomically:**
        *   Finds and assigns an available `PhoneNumber` (marks as 'Busy', stores ID on Order).
        *   Checks stock.
        *   Performs optional location check (Turf.js) against `ServiceArea` polygons (if enabled).
        *   Saves Order, OrderItems.
        *   Decrements stock.
    *   Returns Order ID.
    *   *(If no phone number available, transaction fails, returns error)*.
4.  Redirect to Order Success Page: Displays Order ID and the **assigned verification phone number** (fetched from order details). Instructs user to call.
5.  Admin Panel: Manage Products, Categories (with image uploads), Delivery Locations (via map?), Phone Numbers (status), Orders (view details, map, update status), Users, Zones (map drawing), Dashboard/Stats. Manual phone verification updates order status via Admin Panel.

### 2.3. Problem Solved
Bridges manual/phone orders and full e-commerce. Caters to businesses needing verification, delivery checks, or direct contact.

## 3. Goals

### 3.1. Business Goals
*   Increase Order Volume, Improve Accuracy, Enhance Control, Manage Service Areas, Build Credibility, Efficient Verification.

### 3.2. Customer Experience (UX) Goals (Mobile-First Priority)
*   Intuitive Browsing/Search/Filter, Seamless Cart/Checkout (with Delivery Location selection), Clear Post-Order Flow (with specific verification #), Account Management (Profile, Orders, Wishlist, Delivery Locations), Mobile Optimization, Performance, PWA Installability/Updates.

### 3.3. Admin Experience (UX) Goals
*   Efficient Workflows (CRUD, Order processing, Zone management), Data Clarity (Tables, Maps, Stats), Ease of Management.

### 3.4. Technical Goals
*   Reliability (Atomic transactions), Security (Hashing, JWT, Validation, CORS, Rate Limiting), Performance (Responsive API, Optimized FE builds, DB Indexing, Image Optimization), Maintainability (Monorepo, TS, Docs, Tests), Scalability (Stateless API, Cloud DB option).

## 4. Architecture & Technology Stack

*   **Architecture:** Monorepo (`npm` workspaces), 3 packages (`backend`, `customer-frontend`, `admin-frontend`), REST API, React Context (Customer FE).
*   **Monorepo Tool:** `npm` 7+
*   **Backend (`packages/backend`):**
    *   Runtime: Node.js (LTS)
    *   Framework: Express.js
    *   Language: TypeScript
    *   ORM: Prisma (v6.x)
    *   Database: PostgreSQL
    *   Auth: `jsonwebtoken`, `bcrypt`
    *   Validation: `zod`
    *   File Uploads: `multer` (to local `/public/uploads`), `sharp` (for processing to WebP)
    *   Geospatial: `@turf/boolean-point-in-polygon`, `@turf/helpers`
    *   Middleware: `cors`, `express.json`, `compression`, `express-rate-limit`, Custom Auth (`isUser`, `isAdmin`)
    *   Dev Tools: `nodemon`, `ts-node`
    *   Deployment: Docker container on Render.com
*   **Customer Frontend (`packages/customer-frontend`):**
    *   Framework: React (v19) with Vite (v6.x)
    *   Language: TypeScript (TSX)
    *   Styling: Bootstrap, `react-bootstrap`, Custom CSS (`index.css` - Sage Green theme)
    *   Routing: `react-router-dom`
    *   State Management: React Context (`AuthContext`, `CartContext`, `WishlistContext`)
    *   API Client: `axios` (via `src/utils/api.ts`)
    *   Notifications: `react-hot-toast`
    *   Icons: `react-icons`
    *   i18n: `i18next`, `react-i18next`, `i18next-browser-languagedetector`, `i18next-http-backend` (Supports en, am, om)
    *   PWA: `vite-plugin-pwa` (Auto update, Install prompt)
    *   Build Tool: Vite
    *   Deployment: Static Site on Render.com
*   **Admin Frontend (`packages/admin-frontend`):**
    *   Framework: React (v19) with Vite (v6.x)
    *   Language: TypeScript (TSX)
    *   Styling: Bootstrap, `react-bootstrap`, Custom CSS (`index.css` - Neon Green theme)
    *   Routing: `react-router-dom`, `react-router-bootstrap`
    *   State Management: Component state, (Refactored Auth to `AuthContext`)
    *   API Client: `axios` (via `src/utils/api.ts`)
    *   Notifications: `react-hot-toast`
    *   Icons: `react-icons`
    *   Mapping: `leaflet`, `react-leaflet`, `leaflet-draw`
    *   Charting: `chart.js`, `react-chartjs-2`
    *   Build Tool: Vite
    *   Deployment: Static Site on Render.com
*   **Testing Frameworks:** Vitest, jsdom, React Testing Library, Jest DOM Matchers

## 5. Development Log, Key Decisions & Issues (Reflects `refactor/code-polish-v2`)

*   (Inherited logs from previous states...)
*   **Branch `refactor/code-polish-v2` created** from main for polish/refactoring.
*   **Fixed Phone Assignment Race Condition:** Moved assignment logic into `POST /api/orders` transaction. Added `assignedPhoneNumberId` to `Order` model. Removed separate assignment endpoint. (L13, L28)
*   **Refined Order Success Page:** Updated Customer FE page to fetch and display the specific assigned verification number from order details. Improved clarity.
*   **Standardized Image URL Handling:** Created `getImageUrl` utility in both FEs. Updated components (`ProductCard`, `ProductDetailPage`, `CartPage`, `WishlistPage`, admin pages) to use it. Ensures correct base URL prepending. (L23)
*   **Improved Product Detail Page:** Added `react-bootstrap/Carousel` for multiple images. Adjusted layout (resized back button, potentially moved reviews) for better visibility of 'Add to Cart'.
*   **Fixed Cart Quantity Controls:** Implemented +/- buttons correctly using `updateCartItemQuantity` from context, respecting stock/min limits. Removed direct input field.
*   **Adjusted Rate Limiting:** Tuned limits in backend (`general`, `write`, `auth`) for better balance between UX and abuse prevention.
*   **Added In-App Password Change:** Implemented forms and backend logic (`POST /api/auth/change-password`) for logged-in users (Customer & Admin) to change their password via Settings/Profile pages, requiring current password.
*   **Implemented Checkout Location Selection:** Added dropdown and Add New modal to Customer FE Checkout page. Integrated with `DeliveryLocation` model and updated `POST /api/orders`.
*   **Enhanced PWA:** Added manual install button, update prompt (`PWAPrompt` component), and required icons for better PWA installability and update experience on Customer FE.
*   **Enabled Category Image Upload:** Modified Admin FE Category modal to allow file uploads (using existing `/api/admin/upload` route) instead of just URL input. Backend upload route now uses `sharp` to process images to WebP.
*   **Containerized Backend:** Created `Dockerfile` and `.dockerignore` for the backend service.
*   **Configured Render Deployment:** Set up PostgreSQL DB, Backend Web Service (Docker), Customer Static Site, Admin Static Site. Configured build commands, start commands (`prisma migrate deploy` included), environment variables (DB URL, JWT Secret, VITE_API_URL, CORS_ORIGIN).
*   **Added Backend Compression:** Implemented `compression` middleware.
*   **Setup i18n Foundation (Customer FE):** Installed necessary libraries, configured `i18n.ts`, created placeholder locale files, added language switcher UI, internationalized `Layout.tsx`. Deferred full component refactoring.
*   **Standardized Buttons (Admin FE):** Applied consistent variants/sizes based on action type within the admin panel. Created `LinkButton` component.
*   **Standardized Buttons (Customer FE):** Applied consistent variants/sizes based on action type within the customer app.
*   **Standardized Forms (Admin FE):** Applied consistent styling for labels, inputs, spacing, feedback according to admin theme.
*   **(Deferred) Standardize Forms (Customer FE):** Prompt created but execution deferred.
*   **(Deferred) Data Flow Analysis:** Task skipped by user.

## 6. Lessons Learned (Cumulative)

*   L1: Validate AI Output Rigorously.
*   L2: Explicit Instructions are Key.
*   L3: Manual Steps are Critical (Git, npm, migrations, testing).
*   L4: Maintain Project Context (`project_docs.txt`).
*   L5: Prioritize Backend/Foundations (MVP).
*   L6: Visual Feedback Loop (User validation for UI).
*   L7: Manage Async Operations Carefully (Loading/Error states).
*   L8: Component Design & Boundaries.
*   L9: Frontend State Management Strategy (Context used).
*   L10: Styling Strategy & Consistency (Bootstrap + Custom CSS).
*   L11: API Design & Consistency.
*   L12: Database Schema Evolution (Use migrations).
*   L13: Backend Data Integrity & Transactions (Order/Stock/Phone).
*   L14: Configuration & Environment Management (`.env`, Render Vars).
*   L15: Build & Tooling Integration (Vite, TS, `npm` workspaces).
*   L16: Debugging Strategies (DevTools, Logs, API testing).
*   L17: Code Cleanup & Refactoring.
*   L18: Security Fundamentals (Hashing, JWT, Validation, Rate Limiting, CORS).
*   L19: Handling Complex Features (Geolocation, PWA, File Uploads).
*   L20: Mobile-First / Responsive Design.
*   L21: Data Model/API Change Impact.
*   L22: Build/Dependency Cache Issues (Clean install, `prisma generate`).
*   L23: Frontend/Backend URL Handling (`getImageUrl` utility).
*   L24: Iterative UI Refinement (Button/Form Consistency).
*   L25: Deployment Configuration (Render specifics: env vars, migrate deploy, start cmd, CORS).
*   L26: Environment-Specific CORS (Crucial for production).
*   L27: Feature Branch Scope (Monitor scope creep).
*   L28: Business Logic Integrity & Transactions (Phone assignment fix).
*   L29: Reusable Components (`LinkButton`, `getImageUrl`).
*   L30: Explicit Prop Handling.
*   **L31: PWA Setup:** Requires specific icons, manifest configuration, and service worker setup (`vite-plugin-pwa`). Install prompts depend on browser heuristics. Testing requires building and serving the production version.
*   **L32: i18n Setup:** Libraries like `i18next` provide robust structure. Requires config, locale files, and refactoring components. AI translation needs careful review.
*   **L33: Docker for Node/Prisma:** Multi-stage builds optimize image size. Include `prisma generate` in build, and `prisma migrate deploy` in runtime start command for platforms like Render free tier. Manage dependencies carefully (`devDependencies` needed for build).
*   **L34: Deployment Platform Specifics:** Free tiers have limitations (sleep, DB deletion, no shell access) requiring workarounds (e.g., running migrations in start command). Build commands may need adjustment (`--production=false`).