# Project Documentation: Hybrid E-commerce Platform (Comprehensive)
*(Generated: 2025-05-27 - End of Session on refactor/code-polish-v2)*

## 1. Current Progress

Work commenced on the `feature/customer-address-management` branch (merged or state incorporated into `main`) and continued on the `refactor/code-polish-v2` branch for polish, fixes, and deployment setup.

### 1.1 Current Focus

**Goal:** Analyze and optimize database queries and API request patterns across the backend and both frontends to improve performance, reduce the number of requests, and decrease backend resource usage (memory, CPU). The aim is to enhance efficiency for handling a larger user load.
**Branch:** `refactor/api-perf-optimization` (branched from `main`).
**Status:** Branch created. Starting analysis phase.
**Completed on this branch:**
*   (Nothing yet)

### 1.2 Completed: Customer Address Management Foundation

*(Details moved from previous Current Focus)*

**Goal:** Allow authenticated customers to save, edit, delete, and set default delivery locations on their profile (Settings page) and select a saved location during checkout.

**Branch:** Work done on `feature/customer-address-management` (merged or state incorporated into `main` before `refactor/code-polish-v2` branch). Integration into Checkout completed on `refactor/code-polish-v2`.

**Progress:**
- Refactored Prisma Schema (Address -> DeliveryLocation), Migrated.
- Added `/api/districts` endpoint.
- Refactored `/api/addresses` routes for DeliveryLocation CRUD.
- Refactored `POST /api/orders` to use `deliveryLocationId`.
- Implemented Location selection/add modal in `CheckoutPage.tsx`.
- Implemented Location management UI in `SettingsPage.tsx`.


### 1.3 Completed: Multiple Product Images

*(From previous docs)* The project supports multiple product images.
- Updated DB schema (`imageUrl` -> `images` relation).
- Updated Backend API.
- Updated Admin FE Product Form.
- Updated Customer FE components (ProductCard, DetailPage, Cart, Wishlist).


### 1.4 Completed: Initial Refactor/Review Phase

*(From previous docs - `refactor/code-review-performance-ux` branch, merged to main)*
- Added DB Indexes.
- Standardized API calls.
- Optimized Backend List Queries.
- Frontend Optimizations (`react-icons`, `React.lazy` for Admin FE).
- Admin Zone Map fix.
- General aesthetics pass (spacing, alignment, consistency).
- Settings page UX refinement.
- Order status descriptions added.
- Basic rate limiting on backend auth.
- Minor UX improvements (Order Success page).
- Admin Dashboard order section refactor.

## 2. Project Summary & Vision

### 2.1. Core Concept
Hybrid E-commerce Platform for businesses needing manual phone verification after online order placement. Mobile-first customer frontend (React PWA) + Admin Panel (React).

### 2.2. Unique Workflow
1.  Customer browses/adds to cart (React PWA).
2.  Checkout: provides delivery details (selects/adds DeliveryLocation), geolocation potentially captured.
3.  Order Submission (`POST /api/orders`):
    *   Validates data, delivery location.
    *   **Atomically (within DB transaction):**
        *   Finds and assigns an available `PhoneNumber` (marks as 'Busy', stores ID on Order). *If none available, transaction fails.*
        *   Checks stock. *If insufficient, transaction fails.*
        *   Performs optional location check (Turf.js) against `ServiceArea` polygons (if enabled).
        *   Saves Order, OrderItems.
        *   Decrements stock.
    *   Returns Order ID on success.
4.  Redirect to Order Success Page: Displays Order ID and the **assigned verification phone number** (fetched from order details). Instructs user to call.
5.  Admin Panel: Manage Products, Categories (with image uploads), Delivery Locations (via map?), Phone Numbers (status), Orders (view details, map, update status), Users, Zones (map drawing), Dashboard/Stats. Manual phone verification updates order status via Admin Panel.

### 2.3. Problem Solved
Bridges manual/phone orders and full e-commerce. Caters to businesses needing verification, delivery checks, or direct contact.

## 3. Goals

### 3.1. Business Goals
*   Increase Order Volume, Improve Accuracy, Enhance Control, Manage Service Areas, Build Credibility, Efficient Verification.

### 3.2. Customer Experience (UX) Goals (Mobile-First Priority)
*   Intuitive Browsing/Search/Filter, Seamless Cart/Checkout (with Delivery Location selection), Clear Post-Order Flow (with specific verification #), Account Management (Profile, Orders, Wishlist, Delivery Locations), Mobile Optimization, Performance, PWA Installability/Updates.

### 3.3. Admin Experience (UX) Goals
*   Efficient Workflows (CRUD, Order processing, Zone management), Data Clarity (Tables, Maps, Stats), Ease of Management.

### 3.4. Technical Goals
*   Reliability (Atomic transactions), Security (Hashing, JWT, Validation, CORS, Rate Limiting), Performance (Responsive API, Optimized FE builds, DB Indexing, Image Optimization), Maintainability (Monorepo, TS, Docs, Tests), Scalability (Stateless API, Cloud DB option).

## 4. Architecture & Technology Stack

*   **Architecture:** Monorepo (`npm` workspaces), 3 packages (`backend`, `customer-frontend`, `admin-frontend`), REST API, React Context (Customer FE, Admin FE).
*   **Monorepo Tool:** `npm` 7+
*   **Backend (`packages/backend`):**
    *   Runtime: Node.js (LTS - Node 18 used in Docker)
    *   Framework: Express.js
    *   Language: TypeScript
    *   ORM: Prisma (v6.x)
    *   Database: PostgreSQL
    *   Auth: `jsonwebtoken`, `bcrypt`
    *   Validation: `zod`
    *   File Uploads: `multer` (to local `/public/uploads` temporarily), `sharp` (for processing to WebP)
    *   Geospatial: `@turf/boolean-point-in-polygon`, `@turf/helpers`
    *   Middleware: `cors`, `express.json`, `compression`, `express-rate-limit`, Custom Auth (`isUser`, `isAdmin`)
    *   Dev Tools: `nodemon`, `ts-node`
    *   Deployment: Docker container on Render.com (Web Service Free Tier)
*   **Customer Frontend (`packages/customer-frontend`):**
    *   Framework: React (v19) with Vite (v6.x)
    *   Language: TypeScript (TSX)
    *   Styling: Bootstrap, `react-bootstrap`, Custom CSS (`index.css` - Sage Green theme)
    *   Routing: `react-router-dom`
    *   State Management: React Context (`AuthContext`, `CartContext`, `WishlistContext`)
    *   API Client: `axios` (via `src/utils/api.ts`)
    *   Notifications: `react-hot-toast`
    *   Icons: `react-icons`
    *   i18n: `i18next`, `react-i18next`, `i18next-browser-languagedetector`, `i18next-http-backend` (Supports en, am, om - setup complete, translations pending)
    *   PWA: `vite-plugin-pwa` (Auto update, Install prompt)
    *   Build Tool: Vite
    *   Deployment: Static Site on Render.com (Free Tier)
*   **Admin Frontend (`packages/admin-frontend`):**
    *   Framework: React (v19) with Vite (v6.x)
    *   Language: TypeScript (TSX)
    *   Styling: Bootstrap, `react-bootstrap`, Custom CSS (`index.css` - Neon Green theme)
    *   Routing: `react-router-dom`, `react-router-bootstrap`
    *   State Management: Component state, `AuthContext`
    *   API Client: `axios` (via `src/utils/api.ts`)
    *   Notifications: `react-hot-toast`
    *   Icons: `react-icons`
    *   Mapping: `leaflet`, `react-leaflet`, `leaflet-draw`
    *   Charting: `chart.js`, `react-chartjs-2`
    *   Build Tool: Vite
    *   Deployment: Static Site on Render.com (Free Tier)
*   **Testing Frameworks:** Vitest, jsdom, React Testing Library, Jest DOM Matchers

## 5. Development Log, Key Decisions & Issues (Reflects `refactor/code-polish-v2`)

*   **Branch `refactor/api-perf-optimization` created** from main to focus on performance analysis and optimization of API requests and database queries.
*   **Branch `feature/precise-location-gps` created/resumed** from main to implement precise GPS location features.
*   **Branch `refactor/code-polish-v2` created** from main for polish/refactoring.
*   **Fixed Phone Assignment Race Condition:** Moved assignment logic into `POST /api/orders` transaction. Added `assignedPhoneNumberId` to `Order` model. Removed separate assignment endpoint. (L13, L28)
*   **Refined Order Success Page:** Updated Customer FE page to fetch and display the specific assigned verification number from order details. Improved clarity.
*   **Standardized Image URL Handling:** Created `getImageUrl` utility in both FEs. Updated components (`ProductCard`, `ProductDetailPage`, `CartPage`, `WishlistPage`, admin pages) to use it. Ensures correct base URL prepending. (L23)
*   **Improved Product Detail Page:** Added `react-bootstrap/Carousel` for multiple images. Adjusted layout for better visibility of 'Add to Cart'.
*   **Fixed Cart Quantity Controls:** Implemented +/- buttons correctly using `updateCartItemQuantity` from context, respecting stock/min limits. Removed direct input field.
*   **Adjusted Rate Limiting:** Tuned limits in backend (`general`, `write`, `auth`) for better balance between UX and abuse prevention.
*   **Added In-App Password Change:** Implemented forms and backend logic (`POST /api/auth/change-password`) for logged-in users (Customer & Admin) to change their password via Settings/Profile pages, requiring current password.
*   **Refactored Admin FE Auth:** Implemented `AuthContext` for admin frontend, replacing direct localStorage usage in components like `ProtectedRoute`, `AdminLayout`, `LoginPage`.
*   **Implemented Checkout Location Selection:** Added dropdown and Add New modal to Customer FE Checkout page. Integrated with `DeliveryLocation` model and updated `POST /api/orders`.
*   **Enhanced PWA:** Added manual install button, update prompt (`PWAPrompt` component), and required icons for better PWA installability and update experience on Customer FE.
*   **Enabled Category Image Upload:** Modified Admin FE Category modal to allow file uploads (using existing `/api/admin/upload` route) instead of just URL input. Backend processes to WebP.
*   **Standardized UI:** Applied consistent button variants/sizes and form element styles within both Customer FE and Admin FE according to their respective themes.
*   **Backend - Compression:** Added `compression` middleware.
*   **i18n Setup (Customer FE):** Installed necessary libraries, configured `i18n.ts`, created placeholder locale files (`en`, `am`, `om`), added language switcher UI, internationalized `Layout.tsx`. Deferred full component refactoring.
*   **Containerized Backend:** Created `Dockerfile` and `.dockerignore` for the backend service.
*   **Deployed to Render.com:** Configured PostgreSQL DB, Backend Docker Web Service, Customer Static Site, Admin Static Site. Configured build/start commands, environment variables. Successfully ran initial migrations via start script. Resolved deployment issues (missing types, migration execution, frontend API URL ENV VARs, CORS).

## 6. Lessons Learned (Cumulative)

*   L1: Validate AI Output Rigorously.
*   L2: Explicit Instructions are Key.
*   L3: Manual Steps are Critical (Git, npm, migrations, testing, ENV VARS).
*   L4: Maintain Project Context (`project_docs.txt`).
*   L5: Prioritize Backend/Foundations (MVP).
*   L6: Visual Feedback Loop (User validation for UI).
*   L7: Manage Async Operations Carefully (Loading/Error states, Toasts).
*   L8: Component Design & Boundaries (Context API benefits).
*   L9: Frontend State Management Strategy (Context vs. Local).
*   L10: Styling Strategy & Consistency (Bootstrap + Custom CSS).
*   L11: API Design & Consistency.
*   L12: Database Schema Evolution (Use migrations systematically).
*   L13: Backend Data Integrity & Transactions (Order/Stock/Phone).
*   L14: Configuration & Environment Management (`.env`, Render Vars).
*   L15: Build & Tooling Integration (Vite, TS, `npm` workspaces, `rollup-plugin-visualizer`).
*   L16: Debugging Strategies (DevTools, Logs, API testing, Manual Test).
*   L17: Code Cleanup & Refactoring.
*   L18: Security Fundamentals (Hashing, JWT, Validation, Rate Limiting, CORS).
*   L19: Handling Complex Features (Geolocation, PWA, File Uploads, i18n).
*   L20: Mobile-First / Responsive Design.
*   L21: Data Model/API Change Impact (Frontend updates needed).
*   L22: Build/Dependency Cache Issues (Clean install, `prisma generate`).
*   L23: Frontend/Backend URL Handling (`getImageUrl` utility, `VITE_API_URL`).
*   L24: Iterative UI Refinement (Button/Form Consistency).
*   L25: Deployment Configuration (Render specifics: env vars, `migrate deploy`, start cmd).
*   L26: Environment-Specific CORS (Crucial for production).
*   L27: Feature Branch Scope.
*   L28: Business Logic Integrity & Transactions (Phone assignment fix).
*   L29: Reusable Components (`LinkButton`, `getImageUrl`, `EmptyState`, `StarRating`).
*   L30: Explicit Prop Handling.
*   L31: PWA Setup: Requires icons, manifest, SW (`vite-plugin-pwa`). Install depends on browser heuristics. Test build/preview. Use `beforeinstallprompt` for manual trigger. `autoUpdate` strategy needs refresh prompt UI.
*   L32: i18n Setup: `i18next` good structure. Needs config, locale files (`/public/locales`), component refactoring (`t()` function). AI translation needs human review. Use `Suspense` for loading states.
*   L33: Docker for Node/Prisma: Multi-stage builds best. Include `prisma generate` in build. `prisma migrate deploy` needed at runtime start on limited platforms (like Render Free). Install *all* deps (`--production=false`) before build if devDeps needed. Use `.dockerignore`.
*   L34: Deployment Platform Specifics: Free tiers have limits (sleep, DB deletion, no shell). Workarounds needed (migrations in start command). Check build commands (`--production=false`). Set ENV VARS correctly (`DATABASE_URL`, `VITE_API_URL`, `CORS_ORIGIN`).
*   L35: Runtime Env Var Check: Use `console.log(import.meta.env.VAR_NAME)` in deployed frontend build to verify env vars are correctly passed during build/deployment.
*   L36: CORS Configuration: Must exactly match frontend origins in production ENV VAR, comma-separated, no trailing slashes.