# Project Documentation: Hybrid E-commerce Platform (Comprehensive)
*(Generated: 2025-04-15)*

## 1. Current Progress

Work has commenced on the `feature/customer-ui-refinement` branch with the goal of Customer Frontend UI/UX improvements. This phase focuses on enhancing the user interface and experience of the customer-facing application.

## 1.1 Current Focus: Multiple Product Images

The project is now supporting multiple product images rather than a single image URL. This enhancement allows for a more comprehensive product showcase.

### Status Update:
- Updated the database schema to replace the `imageUrl` field with an `images` relation in the Product model.
- Implemented backend API changes to support the new schema structure.
- Created migration scripts to handle the transition from single to multiple images.
- Updated Admin FE Product Form for multi-image upload/management.
- Fixed Customer FE components (ProductCard, DetailPage, Cart, Wishlist) to correctly display images using the new `images` relation and handle image URL construction properly. [Date: 2025-04-18]

### Code Review & Consistency Checks:
- Verified database indexes on critical fields for query performance
- Standardized API base URL usage across both frontends to prevent duplicate `/api` path segments
- Fixed image upload endpoint in ProductManagementPage
- Verified consistent Address model field names across backend and frontend components
[Date: 2025-05-04]

## 1. Project Summary & Vision

### 1.1. Core Concept
This project implements a **Hybrid E-commerce Platform**, designed primarily for businesses requiring a manual verification step after an online order is placed. It combines the convenience of a modern, **mobile-first e-commerce storefront** (product discovery, cart management, online checkout) with a mandatory **customer-initiated phone call** for final order confirmation and verification.

### 1.2. Unique Workflow
1.  Customers browse products via a **React-based Customer Frontend** (intended as a PWA).
2.  During checkout, the customer provides necessary details and their **geolocation** is captured via the browser API.
3.  Upon submitting the online order, the **Node.js/Express Backend API** performs several actions atomically:
    *   Validates order data and stock availability.
    *   Performs a **location check** using Turf.js to determine if the customer's coordinates fall within admin-defined **Service Areas**.
    *   Saves the order details, including shipping information (as JSON), line items, total amount, location coordinates, and the location check result (`Inside Zone`, `Outside Zone`, `Not Provided`, `Check Failed`).
    *   Decrements stock for ordered products.
    *   *(Ideal Future Refinement: Atomically assign an available phone number and store it on the order)*.
4.  The customer is redirected to an **Order Success Page** which instructs them to call a specific phone number for verification.
5.  The verification phone number is dynamically retrieved via a separate API call (`GET /api/orders/assign-number/:orderId`) which finds an 'Available' number from an admin-managed pool and marks it 'Busy'. *(Note: Potential race condition exists here; planned refinement is to assign during order creation)*.
6.  A separate **React-based Admin Panel** allows staff to:
    *   Manage Products (CRUD, including stock, cost price, image URL, category).
    *   Manage Categories (CRUD, including image URL).
    *   Manage Service Zones (View list, Add new zones via interactive map drawing).
    *   Manage Phone Numbers (Add new numbers, toggle status: Available/Busy/Offline).
    *   Manage Orders (View list filtered by status/date, View full details including items and customer location map, Update order status).
    *   Manage Users (View list with aggregates like order count/total spent, View user details including order history).
    *   View Dashboard/Statistics (Counts, Revenue, Recent Orders, Sales/User timeline charts).

### 1.3. Problem Solved
This platform caters to businesses where automated fulfillment isn't feasible or desired due to:
*   High-value items requiring verification.
*   Complex delivery logistics needing confirmation.
*   Service area restrictions requiring location checks.
*   A business model emphasizing direct customer contact for trust-building or upselling.
*   Regulatory requirements.
It bridges the gap between purely manual (phone/in-person) ordering and fully automated e-commerce, offering customers online convenience while retaining essential manual checks for the business.

## 2. Goals

### 2.1. Business Goals
*   **Increase Order Volume:** Capture online sales potential.
*   **Improve Order Accuracy:** Reduce manual transcription errors.
*   **Enhance Operational Control:** Centralized digital system for orders, inventory (stock tracking), customer data, service zones, and phone line availability via Admin Panel.
*   **Manage Service Areas:** Systematically enforce delivery zone restrictions using geolocation.
*   **Build Brand Credibility:** Professional, modern online presence.
*   **Efficient Verification:** Streamline the process of connecting customers to available staff for verification calls.

### 2.2. Customer Experience (UX) Goals (Mobile-First Priority)
*   **Intuitive Browsing:** Easy product discovery (search, filtering by category/sorting).
*   **Seamless Cart/Checkout:** Simple client-side cart (MVP+ includes backend persistence), straightforward checkout form (optional address), clear location permission request.
*   **Clear Post-Order Flow:** Unambiguous instructions on the Order Success page, including the correct, dynamically assigned verification phone number (with `tel:` link).
*   **Account Management:** Secure registration/login, password reset, viewable profile (email, name), editable password, viewable order history and details, wishlist functionality. *(Address Management deferred)*.
*   **Mobile Optimization:** Layouts, navigation (Offcanvas menu), and interactions designed primarily for mobile devices.
*   **Performance:** Fast page loads and interactions.
*   **PWA Features (Basic):** Installable application icon, basic asset caching via Service Worker. *(Setup complete, needs final verification/refinement)*.

### 2.3. Admin Experience (UX) Goals
*   **Efficient Workflows:** Streamlined processes for managing orders (live view dashboard, status updates, filtering), products (CRUD w/ modal), categories, zones (map interface), phones, and users.
*   **Data Clarity:** Clear presentation of data in tables, cards, and detail views. Visual map display for customer location on order details and zone management. Dashboard statistics and charts for quick insights.
*   **Ease of Management:** Simple interfaces for core administrative tasks.

### 2.4. Technical Goals
*   **Reliability:** High uptime, robust error handling, atomic transactions for critical state changes (order creation, stock updates).
*   **Security:** Secure password handling (bcrypt hashing for storage and reset tokens), JWT-based session management, input validation (Zod on backend, basic frontend), authorization checks (middleware), HTTPS (deployment requirement). Protection against common vulnerabilities (XSS, SQLi via ORM/validation).
*   **Performance:** Responsive APIs (<500ms target), efficient database queries (Prisma ORM, indexing considered), optimized frontend builds (Vite), fast initial load times (code splitting, PWA caching).
*   **Maintainability:** Modular code structure (monorepo, separate routes/contexts/components), TypeScript for type safety, consistent coding patterns, meaningful commit history, this documentation file, basic automated test infrastructure initiated.
*   **Scalability:** Stateless API design where feasible, potential for database read replicas, capable underlying technologies (Node.js, PostgreSQL). Local image storage identified as a scalability limitation for production.

## 3. Architecture & Technology Stack

*   **Architecture:** Monorepo managed via `npm` workspaces. Three distinct packages: `backend`, `customer-frontend`, `admin-frontend`. Communication via RESTful JSON API. Client-side state management via React Context.
*   **Monorepo Tool:** `npm` 7+ (workspaces feature)
*   **Backend (`packages/backend`):**
    *   **Runtime:** Node.js (LTS version assumed)
    *   **Framework:** Express.js (v5.x)
    *   **Language:** TypeScript (v5.x) compiled to CommonJS
    *   **ORM:** Prisma (v6.x) with Prisma Client
    *   **Database:** PostgreSQL (Local instance during development)
    *   **Authentication:** `jsonwebtoken` (JWT signing/verification), `bcrypt` (hashing passwords & reset tokens)
    *   **Validation:** `zod` (for request bodies/params)
    *   **File Uploads:** `multer` (saves to local `public/uploads` directory)
    *   **Geospatial:** `@turf/boolean-point-in-polygon`, `@turf/helpers`
    *   **Middleware:** `cors`, `express.json`, Custom Auth (`isUser`, `isAdmin`)
    *   **Dev Tools:** `nodemon`, `ts-node`
*   **Customer Frontend (`packages/customer-frontend`):**
    *   **Framework:** React (v19) with Vite (v6.x)
    *   **Language:** TypeScript (v5.x) with TSX
    *   **Styling:** Bootstrap (v5.3.x), `react-bootstrap` (v2.10.x), Custom CSS Overrides (`index.css`)
    *   **Routing:** `react-router-dom` (v6.30.x)
    *   **State Management:** React Context API (`AuthContext`, `CartContext`, `WishlistContext`)
    *   **API Client:** `axios`
    *   **Notifications:** `react-hot-toast`
    *   **Icons:** `react-icons` (specifically `Fa` icons)
    *   **PWA:** `vite-plugin-pwa` (v1.x)
    *   **Build Tool:** Vite
*   **Admin Frontend (`packages/admin-frontend`):**
    *   **Framework:** React (v19) with Vite (v6.x)
    *   **Language:** TypeScript (v5.x) with TSX
    *   **Styling:** Bootstrap (v5.3.x), `react-bootstrap` (v2.10.x), Custom CSS Overrides (`index.css`)
    *   **Routing:** `react-router-dom` (v6.30.0 - aligned from v7), `react-router-bootstrap` (v0.26.x)
    *   **State Management:** Component state (`useState`, `useEffect`)
    *   **API Client:** `axios`
    *   **Notifications:** `react-hot-toast`
    *   **Icons:** `react-icons` (specifically `Fi` and `Fa` icons)
    *   **Mapping:** `leaflet`, `react-leaflet`, `leaflet-draw`, `@types/leaflet`, `@types/leaflet-draw`
    *   **Charting:** `chart.js`, `react-chartjs-2`, `@types/chart.js`, `date-fns`
    *   **Build Tool:** Vite
*   **Testing Frameworks (Setup Initiated):**
    *   Vitest
    *   jsdom
    *   React Testing Library (`@testing-library/react`)
    *   Jest DOM Matchers (`@testing-library/jest-dom`)
*   **Development Environment:** Local PostgreSQL instance preferred over initial Docker attempt due to user setup issues. Node managed via system install/nvm.

## 4. Development Log, Key Decisions & Issues

*   **Initial Planning:** Defined detailed requirements for a hybrid e-commerce model with phone verification. Established MVP scope focusing on core order flow, basic product display, and minimal admin controls.
*   **Framework Selection:**
    *   Initial proposal included Vue.js.
    *   Switched to **React** for both frontends due to user preference and perceived larger ecosystem/easier troubleshooting after encountering initial tooling friction with Vue setup.
    *   Backend choice: **Node.js/Express** selected for JavaScript ecosystem consistency and performance. Prisma chosen as ORM for type safety and ease of use with PostgreSQL.
*   **Monorepo Tooling:** Started with `pnpm`, switched to **`npm` workspaces** due to user environment issues/preference. Required removing `pnpm-lock.yaml`, `pnpm-workspace.yaml` and configuring `workspaces` in root `package.json`, followed by reinstalling dependencies.
*   **Styling:**
    *   Initial attempt with **Tailwind CSS** abandoned due to configuration issues (`@tailwindcss/postcss` requirement, build errors).
    *   Switched to **Bootstrap 5 + `react-bootstrap`** for component library approach and potentially simpler build integration.
    *   Implemented **custom theming** via CSS variable overrides in `index.css` (Neon Green primary, Dark Gray secondary). Addressed button contrast issues.
    *   Performed multiple **polish passes** focusing on spacing, alignment, typography, component consistency, interactive states, and mobile responsiveness using Bootstrap utilities.
*   **Backend Development (Sprint 1 & Enhancements):**
    *   Implemented core API endpoints following REST principles.
    *   Integrated Prisma for database interactions.
    *   Implemented **JWT authentication**; debugged initial 401 errors caused by **inconsistent JWT secret defaults** between signing (`authRoutes`) and verification (`authMiddleware`). Standardized secret handling using `.env` and consistent defaults. Cleaned up middleware logging.
    *   Implemented **bcrypt password hashing** for registration and login, replacing initial plain text MVP approach. Verified impact on existing vs new users.
    *   Implemented **hashed token password reset** flow (request, reset endpoints).
    *   Implemented **persistent cart** API endpoints (`/api/cart`).
    *   Implemented **wishlist** API endpoints (`/api/wishlist`).
    *   Implemented **product review** API endpoints (`/api/reviews`, `/api/products/:id/reviews`), including updating product aggregate ratings.
    *   Implemented **location check** using Turf.js within the `POST /api/orders` transaction. Verified logic and data saving.
    *   Implemented **stock management** (check and decrement) within the `POST /api/orders` transaction. Added Admin stock adjustment endpoint.
    *   Implemented **Admin CRUD** APIs for Products, Categories, Phones, Zones.
    *   Implemented **Admin Reporting** APIs (`/stats`, `/reports/*`