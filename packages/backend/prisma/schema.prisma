generator client {
  provider = "prisma-client-js"
   binaryTargets = ["native", "debian-openssl-1.1.x", "debian-openssl-3.0.x"]
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                   Int               @id @default(autoincrement())
  email                String            @unique
  passwordHash         String
  name                 String?           // Add optional name field
  createdAt            DateTime          @default(now())
  updatedAt            DateTime          @updatedAt
  passwordResetExpires DateTime?
  passwordResetToken   String?           @unique
  orders               Order[]
  reviews              Review[]
  cartItems            CartItem[]
  wishlistItems        WishlistItem[]
  addresses            Address[]
  deliveryLocations    DeliveryLocation[]
  role                 String   @default("customer")

  @@index([email])
}

model Category {
  id          Int       @id @default(autoincrement())
  name        String    @unique
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  imageUrl    String?
  products    Product[]
}

model Product {
  id            Int         @id @default(autoincrement())
  name          String
  price         Float
  costPrice     Float?      // Optional: Cost of the product
  description   String?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  stock         Int         @default(0)
  categoryId    Int?
  averageRating Float?
  reviewCount   Int         @default(0)
  orderItems    OrderItem[]
  category      Category?   @relation(fields: [categoryId], references: [id])
  reviews       Review[]
  cartItems     CartItem[]
  wishlistedBy  WishlistItem[]
  images        ProductImage[]

  @@index([name])
  @@index([categoryId])
  @@index([createdAt])
}

model Order {
  id                  Int               @id @default(autoincrement())
  userId              Int
  latitude            Float?
  longitude           Float?
  status              String
  createdAt           DateTime          @default(now())
  updatedAt           DateTime          @updatedAt
  shippingDetails     Json?
  totalAmount         Float
  locationCheckResult String?
  deliveryLocationId  Int?
  assignedPhoneNumberId Int?           // New field to store the assigned phone number
  user                User              @relation(fields: [userId], references: [id])
  items               OrderItem[]
  deliveryLocation    DeliveryLocation? @relation(fields: [deliveryLocationId], references: [id])
  assignedPhoneNumber PhoneNumber?     @relation(fields: [assignedPhoneNumberId], references: [id])

  @@index([userId])
  @@index([status])
  @@index([createdAt])
  @@index([deliveryLocationId])
  @@index([assignedPhoneNumberId])    // Add index for the new foreign key
}

model OrderItem {
  id          Int      @id @default(autoincrement())
  orderId     Int
  productId   Int
  productName String
  quantity    Int
  price       Float
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  order       Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product     Product  @relation(fields: [productId], references: [id])

  @@index([orderId])
  @@index([productId])
}

model ServiceArea {
  id             Int      @id @default(autoincrement())
  name           String   @unique
  geoJsonPolygon String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@index([name])
}

model PhoneNumber {
  id           Int      @id @default(autoincrement())
  numberString String   @unique
  status       String   @default("Offline")
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  orders       Order[]   // Add reverse relation for phone number to orders

  @@index([status])
}

model Review {
  id        Int      @id @default(autoincrement())
  rating    Int
  comment   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  productId Int
  userId    Int
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
  @@index([productId])
  @@index([userId])
}

model CartItem {
  id        Int      @id @default(autoincrement())
  userId    Int
  productId Int
  quantity  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  product   Product  @relation(fields: [productId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
  
  @@unique([userId, productId]) // Ensure uniqueness of product per user
  @@index([userId])
}

model WishlistItem {
  id        Int      @id @default(autoincrement())
  userId    Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  productId Int
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@unique([userId, productId]) // User can only wishlist a product once
  @@index([userId])
}

model Address {
  id          Int      @id @default(autoincrement())
  userId      Int
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade) // Cascade delete addresses if user is deleted
  fullName    String
  phone       String
  address     String
  city        String
  state       String?
  zipCode     String
  country     String
  isDefault   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([userId]) // Index for faster lookups by user
}

model ProductImage {
  id        Int      @id @default(autoincrement())
  url       String   // Relative path like /uploads/filename.ext
  productId Int
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@index([productId])
}

model DeliveryLocation {
  id        Int      @id @default(autoincrement())
  userId    Int
  name      String
  phone     String
  district  String
  isDefault Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  orders    Order[]

  @@index([userId])
}
