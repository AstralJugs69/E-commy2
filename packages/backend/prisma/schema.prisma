generator client {
  provider      = "prisma-client-js"
  output        = "../node_modules/.prisma/client"
  binaryTargets = ["native", "debian-openssl-1.1.x", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                   Int                @id @default(autoincrement())
  email                String             @unique
  passwordHash         String
  createdAt            DateTime           @default(now())
  updatedAt            DateTime           @updatedAt
  passwordResetExpires DateTime?
  passwordResetToken   String?            @unique
  name                 String?
  role                 String             @default("customer")
  addresses            Address[]
  cartItems            CartItem[]
  deliveryLocations    DeliveryLocation[]
  orders               Order[]
  reviews              Review[]
  wishlistItems        WishlistItem[]

  @@index([email])
}

model Category {
  id          Int       @id @default(autoincrement())
  name        String    @unique
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  imageUrl    String?
  products    Product[]
}

model Product {
  id            Int            @id @default(autoincrement())
  name          String
  price         Float
  description   String?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  stock         Int            @default(0)
  categoryId    Int?
  averageRating Float?
  reviewCount   Int            @default(0)
  costPrice     Float?
  cartItems     CartItem[]
  orderItems    OrderItem[]
  category      Category?      @relation(fields: [categoryId], references: [id])
  images        ProductImage[]
  reviews       Review[]
  wishlistedBy  WishlistItem[]

  @@index([name])
  @@index([categoryId])
  @@index([createdAt])
}

model Order {
  id                    Int               @id @default(autoincrement())
  userId                Int
  latitude              Float?
  longitude             Float?
  status                String
  createdAt             DateTime          @default(now())
  updatedAt             DateTime          @updatedAt
  shippingDetails       Json?
  totalAmount           Float
  locationCheckResult   String?
  deliveryLocationId    Int?
  assignedPhoneNumberId Int?
  assignedPhoneNumber   PhoneNumber?      @relation(fields: [assignedPhoneNumberId], references: [id])
  deliveryLocation      DeliveryLocation? @relation(fields: [deliveryLocationId], references: [id])
  user                  User              @relation(fields: [userId], references: [id])
  items                 OrderItem[]

  @@index([userId])
  @@index([status])
  @@index([createdAt])
  @@index([deliveryLocationId])
  @@index([assignedPhoneNumberId])
}

model OrderItem {
  id          Int      @id @default(autoincrement())
  orderId     Int
  productId   Int
  productName String
  quantity    Int
  price       Float
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  order       Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product     Product  @relation(fields: [productId], references: [id])

  @@index([orderId])
  @@index([productId])
}

model ServiceArea {
  id             Int      @id @default(autoincrement())
  name           String   @unique
  geoJsonPolygon String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@index([name])
}

model PhoneNumber {
  id           Int      @id @default(autoincrement())
  numberString String   @unique
  status       String   @default("Offline")
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  orders       Order[]

  @@index([status])
}

model Review {
  id        Int      @id @default(autoincrement())
  rating    Int
  comment   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  productId Int
  userId    Int
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
  @@index([productId])
  @@index([userId])
}

model CartItem {
  id        Int      @id @default(autoincrement())
  userId    Int
  productId Int
  quantity  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  product   Product  @relation(fields: [productId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@unique([userId, productId])
  @@index([userId])
}

model WishlistItem {
  id        Int      @id @default(autoincrement())
  userId    Int
  productId Int
  createdAt DateTime @default(now())
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
  @@index([userId])
}

model Address {
  id        Int      @id @default(autoincrement())
  userId    Int
  city      String
  state     String?
  country   String
  isDefault Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  fullName  String
  address   String
  phone     String
  zipCode   String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model ProductImage {
  id        Int      @id @default(autoincrement())
  url       String
  productId Int
  createdAt DateTime @default(now())
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([productId])
}

model DeliveryLocation {
  id        Int      @id @default(autoincrement())
  userId    Int
  name      String
  phone     String
  district  String
  isDefault Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  orders    Order[]

  @@index([userId])
}
